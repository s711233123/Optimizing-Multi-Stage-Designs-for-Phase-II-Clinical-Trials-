# === 載入必要套件與程式 ===
library(globpso)
library(GA)
library(DEoptim)
library(ABCoptim)
# 載入自定模組
source("run/util.R")
source("run/kStageP2A_Objective.R")
# === 載入必要套件與程式 ===
library(globpso)
library(GA)
library(DEoptim)
library(ABCoptim)
# 載入自定模組
source("run/util.R")
source("run/kStageP2A_Objective.R")
source("run/run_pso_stage.R")
source("run/run_ga_stage.R")
source("run/run_de_stage.R")
source("run/run_abc_stage.R")
# === 全域設定 ===
nStage <- 2
alpha <- 0.1
beta <- 0.1
q_adm <- 0.3
seed <- 819
maxIter1 <- 100
maxIter2 <- 500
size <- 256
nMaxRange <- c(10, 70)
# === p0, p1 組合（共15組） ===
p_combinations <- data.frame(
p0 = seq(0.10, 0.10, by = 0.05),
p1 = seq(0.30, 0.30, by = 0.05)
)
# === 指定演算法（"pso", "ga", "de", "abc"）===
algo <- "pso"
# === 結果儲存用 ===
results <- list()
# === 主迴圈 ===
for (i in 1:nrow(p_combinations)) {
p0 <- p_combinations$p0[i]
p1 <- p_combinations$p1[i]
cat(sprintf("=== %s: p0 = %.2f, p1 = %.2f ===\n", toupper(algo), p0, p1))
cli <- list(p0 = p0, p1 = p1, alpha = alpha, beta = beta)
if (algo == "pso") {
opt <- run_pso_two_stage(seed, 1, 0, cli, nStage, maxIter1, maxIter2, nSwarm = size, nMaxRange, FALSE)
min <- run_pso_two_stage(seed, 1, 1, cli, nStage, maxIter1, maxIter2, nSwarm = size, nMaxRange, TRUE)
adm <- run_pso_two_stage(seed, 1, q_adm, cli, nStage, maxIter1, maxIter2, nSwarm = size, nMaxRange, FALSE)
} else if (algo == "ga") {
opt <- run_ga_two_stage(seed, 1, 0, cli, nStage, maxIter1, maxIter2, popSize = size, nMaxRange, FALSE)
min <- run_ga_two_stage(seed, 1, 1, cli, nStage, maxIter1, maxIter2, popSize = size, nMaxRange, TRUE)
adm <- run_ga_two_stage(seed, 1, q_adm, cli, nStage, maxIter1, maxIter2, popSize = size, nMaxRange, FALSE)
} else if (algo == "de") {
opt <- run_de_two_stage(seed, 1, 0, cli, nStage, maxIter1, maxIter2, NP = size, nMaxRange, FALSE)
min <- run_de_two_stage(seed, 1, 1, cli, nStage, maxIter1, maxIter2, NP = size, nMaxRange, TRUE)
adm <- run_de_two_stage(seed, 1, q_adm, cli, nStage, maxIter1, maxIter2, NP = size, nMaxRange, FALSE)
} else if (algo == "abc") {
opt <-run_abc_two_stage(seed, 1, 0, cli, nStage, maxIter1, maxIter2, foodNumber = size, nMaxRange, FALSE)
min <- run_abc_two_stage(seed, 1, 1, cli, nStage, maxIter1, maxIter2, foodNumber = size, nMaxRange, TRUE)
adm <- run_abc_two_stage(seed, 1, q_adm, cli, nStage, maxIter1, maxIter2, foodNumber = size, nMaxRange, FALSE)
} else {
stop("Unsupported algorithm")
}
# 整理結果
results[[i]] <- list(
p0 = p0,
p1 = p1,
optimal = opt,
minimax = min,
admissible = adm
)
}
# === 動態整理 opt_df ===
opt_df <- do.call(rbind, lapply(results, function(res) {
row <- data.frame(p0 = res$p0, p1 = res$p1)
for (k in 1:nStage) {
row[[paste0("stage", k)]] <- paste0(res$optimal$rseq[k], "/", res$optimal$nseq[k])
}
row$EN_opt <- res$optimal$en
for (k in 1:(nStage - 1)) {
row[[paste0("pet", k, "_opt")]] <- formatC(res$optimal$pet_seq[k], format = "f", digits = 6)
}
row
}))
# === 動態整理 min_df ===
min_df <- do.call(rbind, lapply(results, function(res) {
row <- data.frame(p0 = res$p0, p1 = res$p1)
for (k in 1:nStage) {
row[[paste0("stage", k)]] <- paste0(res$minimax$rseq[k], "/", res$minimax$nseq[k])
}
row$EN_minmax <- res$minimax$en
for (k in 1:(nStage - 1)) {
row[[paste0("pet", k, "_min")]] <- formatC(res$minimax$pet_seq[k], format = "f", digits = 6)
}
row
}))
# === 動態整理 adm_df ===
adm_df <- do.call(rbind, lapply(results, function(res) {
row <- data.frame(p0 = res$p0, p1 = res$p1)
for (k in 1:nStage) {
row[[paste0("stage", k)]] <- paste0(res$admissible$rseq[k], "/", res$admissible$nseq[k])
}
row$EN_minmax <- res$admissible$en
for (k in 1:(nStage - 1)) {
row[[paste0("pet", k, "_min")]] <- formatC(res$admissible$pet_seq[k], format = "f", digits = 6)
}
row
}))
print(opt_df)
print(min_df)
print(adm_df)
